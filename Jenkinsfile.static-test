/*
 *  Copyright (C) 2011-2021 Red Hat, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
def artifact_glob="build/*"
def build_image="quay.io/ligangty/spmm-agent-go:latest"

pipeline {
  agent {
    kubernetes {
      cloud params.JENKINS_AGENT_CLOUD_NAME
      label "jenkins-slave-${UUID.randomUUID().toString()}"
      serviceAccount "jenkins"
      defaultContainer 'jnlp'
      yaml """
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          app: "jenkins-${env.JOB_BASE_NAME}"
          indy-pipeline-build-number: "${env.BUILD_NUMBER}"
      spec:
        containers:
        - name: jnlp
          image: ${build_image}
          imagePullPolicy: Always
          tty: true
          env:
          - name: JAVA_HOME
            value: /usr/lib/jvm/java-11-openjdk
          - name: HOME
            value: /home/jenkins
          - name: GOROOT
            value: /usr/lib/golang
          - name: GOPATH
            value: /home/jenkins/gopath
          - name: GOPROXY
            value: https://proxy.golang.org
          resources:
            requests:
              memory: 4Gi
              cpu: 2000m
            limits:
              memory: 8Gi
              cpu: 4000m
          workingDir: /home/jenkins
      """
    }
  }
  options {
    //timestamps()
    timeout(time: 360, unit: 'MINUTES')
  }
  environment {
    PIPELINE_NAMESPACE = readFile('/run/secrets/kubernetes.io/serviceaccount/namespace').trim()
    PIPELINE_USERNAME = sh(returnStdout: true, script: 'id -un').trim()
  }
  stages {
    stage('Show golang environment'){
      steps{
        script{
          sh 'go version'
          sh 'go env'
        }
      }
    }

    stage('Build') {
      steps {
        sh 'make build'
      }
    }

    stage("Run test") {
      steps {
        script {
          sh 'chmod +x ./build/indy-test'
          if (env.INDY_TARGET != null && env.INDY_TARGET.trim() != '') {
            echo "INDY_TARGET is specified as $INDY_TARGET!"
            sh "./build/indy-test static-test -o ${ORIGINAL_INDY} -f ${FOLO_ID} -s ${INDY_TARGET} -p ${PROCESS_NUM}"
          } else {
            catchError(stageResult: 'FAILURE') {
              echo "INDY_TARGET is not specified! Can not do the testing!"
              sh "exit 1" 
            }
          }
        }
      }
    }

  }
  post {
    success {
      script {
        echo "SUCCEED"
      }
    }
    failure {
      script {
        echo "FAILED"
      }
    }
  }
}


